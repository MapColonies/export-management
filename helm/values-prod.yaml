global:
  cloudProvider:
    dockerRegistryUrl: acrarolibotnonprod.azurecr.io
    imagePullSecretName: acr-registry
    flavor: openshift
  tracing: {}
  metrics: {}
  environment: {}

  opalaEnabled: false  
  authentication:
    jwtPublicKeySecretName: map-colonies-jwks

enabled: true
environment: production
replicaCount: 2
initialDelaySeconds: 60
# nodePort: 30030 #for minikube deployment only
resetOnConfigChange: true
imagePullPolicy: Always

cloudProvider:
  dockerRegistryUrl: acrarolibotnonprod.azurecr.io
  imagePullSecretName: acr-registry
  flavor: openshift

authentication:
  ssl:
    enabled: false
    useExternal: false
    externalSecretName: ""
  opa:
    enabled: false
    customHeaderName: "x-api-key,content-type"

caSecretName: ''
caPath: '/usr/local/share/ca-certificates'
caKey: 'ca.crt'

image:
  repository: export-management
  tag: "v1.5.0"

targetPort: 8080
internalServicePort: 80
servicePort: 8080 
nodePort: 30018 

serviceUrls:
  exporterTrigger: "http://raster-prod-exporter-trigger-service"
  jobManager: "http://common-job-manager"
jobManagement:
    exporter:
      jobType: tilesExport

env:
  protocol: TCP
  logLevel: "warn"
  logPrettyPrintEnabled: false
  responseCompressionEnabled: true
  disableHttpClientLogs: false
  requestPayloadLimit: 10mb
  serviceWebhookEndpoint: https://export-management.apps.j1lk3njp.eastus.aroapp.io/export-tasks/webhook/
  tracing:
    enabled: false
    url: http://infra-monitoring-opentelemetry-collector.infra-services.svc.cluster.local:4317
  metrics:
    enabled: false
    url: http://infra-monitoring-opentelemetry-collector.infra-services.svc.cluster.local:4317/v1/metrics
  httpRetry:
    attempts: 5
    delay: exponential
    shouldResetTimeout: true

resources:
  enabled: true
  value:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi


nginx:
  enabled: true
  fullnameOverride: "export-management-export-management-nginx"
  replicaCount: 2
  image:
    repository: nginx-otel-unprivileged
    tag: "v1.0.0"
  envoy:
    image: envoyproxy/envoy
    imageTag: v1.20.7
    port: &envoyPort 8000
    maxRequestBytes: 8192
    requestedDomain: rasterExport
    resources:
      enabled: true
      value:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi
  opa:
    image: openpolicyagent/opa
    imageTag: 0.29.4-envoy-3
    port: 9191
    createSecret: true
    jwtPublicKeySecretName: map-colonies-jwks
    customHeaderName: "x-api-key"
    secretName: docker-mapproxy-nginx-opa
    enableLogging: false
    logLevel: warn
    resources:
      enabled: true
      value:
        limits:
          cpu: 100m
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi

  port: 8080
  internalServicePort: 80
  nginxTargetPort: &nginxTargetPort 8080
  targetPort: *nginxTargetPort  # --> if global.opalaEnabled is true use *nginxTargetPort else use *envoyPort | if no authorization is needed use *nginxTargetPort
  nodePort: 30003

  authorization:
    enabled: true
    domain: "rasterExport"
    url: http://opa-int-opa-service.infra-services/v1/data/http/authz/decision
    token:
      queryName: token

  extraVolumes:
    - name: nginx-config
      configMap:
        name: '{{ .Release.Name }}-export-management-nginx-configmap' 
    - name: envoy-config
      configMap:
        name: "{{ .Release.Name }}-export-management-envoy-configmap"
    - name: opa-policy
      secret:
        secretName: "{{ .Release.Name }}-opa"
    - name: jwt-public-keys
      secret:
        secretName: "{{ .Values.global.authentication.jwtPublicKeySecretName }}"    

  extraVolumeMounts:
    - name: nginx-config
      mountPath: "/etc/nginx/conf.d/default.conf"
      subPath: default.conf
    - mountPath: "/etc/nginx/nginx.conf"
      name: nginx-config
      subPath: nginx.conf

  sidecars: |-
    {{- if and (not .Values.global.opalaEnabled) (.Values.authorization.enabled) }}
    - name: envoy
      image: {{ .Values.envoy.image }}:{{ .Values.envoy.imageTag }}
      volumeMounts:
      - name: envoy-config
        readOnly: true
        mountPath: /config
      - name: jwt-public-keys
        readOnly: true
        mountPath: /keys/mapColonies.jwks
        subPath: mapColonies.jwks
      args:
      - "envoy"
      - "--config-path"
      - "/config/envoy.yaml"
      ports:
      - name: http
        containerPort: 8000
        protocol: TCP
      {{- if .Values.envoy.resources.enabled }}
      resources:
        {{- toYaml .Values.envoy.resources.value | nindent 4 }}
      {{- end }}
    - name: opa
      image: "{{ .Values.opa.image }}:{{ .Values.opa.imageTag }}"
      volumeMounts:
      - readOnly: true
        mountPath: /policy
        name: opa-policy
      args:
      - "run"
      - "--server"
      - "--addr=0.0.0.0:8181"
      - "--diagnostic-addr=0.0.0.0:8282"
      - "--set=plugins.envoy_ext_authz_grpc.add=:{{ .Values.opa.imageTag }}"
      - "--set=plugins.envoy_ext_authz_grpc.path=envoy/authz/allow"
      {{- if .Values.opa.enableLogging }}
      - "--set=decision_logs.console=true"
      {{- end }}
      - "/policy/policy.rego"
      {{- if .Values.opa.resources.enabled }}
      resources:
        {{- toYaml .Values.opa.resources.value | nindent 12 }}
      {{- end }}
      livenessProbe:
        httpGet:
          path: /health?plugins
          port: 8282
        initialDelaySeconds: 5
        periodSeconds: 30
      readinessProbe:
        httpGet:
          path: /health?plugins
          port: 8282
        initialDelaySeconds: 5
        periodSeconds: 30
      {{- end }}    

  resources:
    enabled: true
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi

  route:
    enabled: true
    path: /
    host:
    timeout:
      enabled: false # defaults to 30s by openshift
      duration: 60s # supported units (us, ms, s, m, h, d)

  ingress:
    enabled: false
    path: /api/raster/v1
    host: "localhost"
    tls:
      enabled: true
      useExternal: ""
