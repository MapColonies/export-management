openapi: 3.0.1
info:
  title: service-name
  description: basic template for map colonies service
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
security:
  - ApiKeyAuth: []

paths:
  /export-tasks:
    post:
      operationId: createTask
      summary: Create an export task
      security:
        - ApiKeyAuth: []
      tags:
        - Tasks
      requestBody:
        description: task details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/taskCreate'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskCreate'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        509:
          description: Insufficient Storage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
components:
  schemas:
    taskCreate:
      type: object
      required:
        - catalogRecordID
        - domain
        - artifactCRS
        - webhook
      properties:
        catalogRecordID:
          type: string
          format: uuid
        domain:
          type: string
          enum: ['Raster', '3D', 'DEM']
        ROI:
          $ref: '#/components/schemas/FeatureCollection'
        artifactCRS:
          type: string
        description:
          type: string
        parameters:
          type: object
        webhook:
          type: array
          items:
            type: object
            required:
              - events
              - url
            properties:
              events:
                type: array
                uniqueItems: true
                minItems: 1
                items:
                  type: string
                  enum: ['TASK_COMPLETED', 'TASK_FAILED', 'TASK_ABORTED', 'TASK_STARTED']
              url:
                type: string
                format: url
                example: 'https://webhook.com'

    FeatureCollection:
      type: object
      description: GeoJson Feature Collection
      required:
        - type
        - features
      properties:
        type:
          type: string
          enum: ['FeatureCollection']
        features:
          type: array
          items:
            $ref: '#/components/schemas/Feature'

    Feature:
      type: object
      description: GeoJson Feature
      required:
        - type
        - properties
        - geometry
      properties:
        type:
          type: string
          enum: ['Feature']
        properties:
          type: object
        geometry:
          type: object
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/GeometryCollection'
            - $ref: '#/components/schemas/Geometry'

    GeometryCollection:
      type: object
      description: GeoJSon geometry collection
      required:
        - type
        - geometries
      externalDocs:
        url: http://geojson.org/geojson-spec.html#geometrycollection
      properties:
        type:
          type: string
          enum:
            - GeometryCollection
          description: custom properties
        geometries:
          type: array
          items:
            $ref: '#/components/schemas/GeometryBase'

    Geometry:
      description: GeoJSon geometry
      type: object
      oneOf:
        - $ref: '#/components/schemas/Polygon'
        - $ref: '#/components/schemas/MultiPolygon'

    Polygon:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id4
      allOf:
        - $ref: '#/components/schemas/GeometryBase'
        - properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Point2D'

    MultiPolygon:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id6
      allOf:
        - $ref: '#/components/schemas/GeometryBase'
        - properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/Point2D'

    GeometryBase:
      type: object
      description: GeoJSon geometry
      required:
        - type
      externalDocs:
        url: http://geojson.org/geojson-spec.html#geometry-objects
      properties:
        type:
          type: string
          enum:
            - Polygon
            - MultiPolygon
          description: the geometry type

    Point2D:
      type: array
      maxItems: 2
      minItems: 2
      items:
        type: number
        
    Point:
      type: object
      description: GeoJSon geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id2
      allOf:
        - $ref: '#/components/schemas/GeometryBase'
        - properties:
            coordinates:
              $ref: '#/components/schemas/Point2D'

    BBox:
      type: array
      items:
        type: number
      minItems: 4
      maxItems: 4
      description: >-
        Bounding box corners (lower left, upper right)=[minx,miny,maxx,maxy] in
        crs units as array. If empty - original layer's bbox is taken.

    error:
      type: object
      required:
        - message
      properties:
        message:
          type: string

  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: query      # can be "header", "query" or "cookie"
      name: token  # name of the header, query parameter or cookie
